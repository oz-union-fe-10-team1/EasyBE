# Generated by Django 5.2.4 on 2025-08-07 08:39

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("nickname", models.CharField(max_length=20, unique=True)),
                ("email", models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                (
                    "role",
                    models.CharField(choices=[("USER", "사용자"), ("ADMIN", "관리자")], default="USER", max_length=10),
                ),
                ("is_adult", models.BooleanField(default=False, help_text="성인 인증 여부")),
                ("adult_verified_at", models.DateTimeField(blank=True, help_text="성인 인증 완료 일시", null=True)),
                ("notification_agreed", models.BooleanField(default=True, help_text="알림 수신 동의")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "users",
            },
        ),
        migrations.CreateModel(
            name="PreferTasteProfile",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "sweetness_level",
                    models.DecimalField(
                        decimal_places=1,
                        default=2.5,
                        help_text="단맛 선호도",
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                    ),
                ),
                (
                    "acidity_level",
                    models.DecimalField(
                        decimal_places=1,
                        default=2.5,
                        help_text="산미 선호도",
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                    ),
                ),
                (
                    "body_level",
                    models.DecimalField(
                        decimal_places=1,
                        default=2.5,
                        help_text="바디감 선호도",
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                    ),
                ),
                (
                    "carbonation_level",
                    models.DecimalField(
                        decimal_places=1,
                        default=2.5,
                        help_text="탄산감 선호도",
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                    ),
                ),
                (
                    "bitterness_level",
                    models.DecimalField(
                        decimal_places=1,
                        default=2.5,
                        help_text="쓴맛 선호도",
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                    ),
                ),
                (
                    "aroma_level",
                    models.DecimalField(
                        decimal_places=1,
                        default=2.5,
                        help_text="향 선호도",
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                    ),
                ),
                ("total_reviews_count", models.PositiveIntegerField(default=0, help_text="반영된 총 리뷰 수")),
                ("is_initialized", models.BooleanField(default=False, help_text="취향 테스트로 초기화 완료 여부")),
                ("last_updated", models.DateTimeField(auto_now=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="taste_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "prefer_taste_profiles",
            },
        ),
        migrations.CreateModel(
            name="SocialAccount",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "provider",
                    models.CharField(
                        choices=[("KAKAO", "카카오"), ("NAVER", "네이버"), ("GOOGLE", "구글")], max_length=10
                    ),
                ),
                ("provider_id", models.CharField(max_length=255)),
                ("provider_email", models.EmailField(blank=True, max_length=254, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="social_accounts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_social_accounts",
            },
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["email"], name="users_email_4b85f2_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["role"], name="users_role_0ace22_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["is_adult"], name="users_is_adul_323212_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["created_at"], name="users_created_6541e9_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["-created_at"], name="users_created_30b417_idx"),
        ),
        migrations.AddIndex(
            model_name="prefertasteprofile",
            index=models.Index(fields=["user"], name="prefer_tast_user_id_3f2164_idx"),
        ),
        migrations.AddIndex(
            model_name="prefertasteprofile",
            index=models.Index(fields=["last_updated"], name="prefer_tast_last_up_2ad742_idx"),
        ),
        migrations.AddIndex(
            model_name="socialaccount",
            index=models.Index(fields=["user"], name="user_social_user_id_7c19ba_idx"),
        ),
        migrations.AddIndex(
            model_name="socialaccount",
            index=models.Index(fields=["provider", "provider_id"], name="user_social_provide_9ee368_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="socialaccount",
            unique_together={("provider", "provider_id")},
        ),
    ]
