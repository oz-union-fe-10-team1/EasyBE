# Generated by Django 5.2.4 on 2025-08-07 03:12

import uuid

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Package",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=30)),
                (
                    "type",
                    models.CharField(
                        choices=[("CURATED", "큐레이티드"), ("MY_CUSTOM", "마이 커스텀")],
                        default="CURATED",
                        max_length=10,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "packages",
            },
        ),
        migrations.CreateModel(
            name="Brewery",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100)),
                ("region", models.CharField(blank=True, max_length=30, null=True)),
                ("address", models.TextField(blank=True, null=True)),
                ("phone", models.CharField(blank=True, max_length=20, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("image", models.URLField(blank=True, max_length=255, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "breweries",
                "indexes": [
                    models.Index(fields=["name"], name="breweries_name_cf9de9_idx"),
                    models.Index(fields=["region"], name="breweries_region_13388c_idx"),
                    models.Index(fields=["is_active"], name="breweries_is_acti_d751ac_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="Drink",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100)),
                ("ingredients", models.TextField(help_text="원재료")),
                (
                    "alcohol_type",
                    models.CharField(
                        choices=[
                            ("MAKGEOLLI", "막걸리"),
                            ("YAKJU", "약주"),
                            ("CHEONGJU", "청주"),
                            ("SOJU", "소주"),
                            ("FRUIT_WINE", "과실주"),
                        ],
                        help_text="주종",
                        max_length=20,
                    ),
                ),
                (
                    "alcohol_content",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="알코올 도수",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("volume_ml", models.PositiveIntegerField(help_text="용량(ml)")),
                (
                    "sweetness_level",
                    models.DecimalField(
                        decimal_places=1,
                        default=0.0,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                    ),
                ),
                (
                    "acidity_level",
                    models.DecimalField(
                        decimal_places=1,
                        default=0.0,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                    ),
                ),
                (
                    "body_level",
                    models.DecimalField(
                        decimal_places=1,
                        default=0.0,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                    ),
                ),
                (
                    "carbonation_level",
                    models.DecimalField(
                        decimal_places=1,
                        default=0.0,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                    ),
                ),
                (
                    "bitterness_level",
                    models.DecimalField(
                        decimal_places=1,
                        default=0.0,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                    ),
                ),
                (
                    "aroma_level",
                    models.DecimalField(
                        decimal_places=1,
                        default=0.0,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "brewery",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="drinks", to="products.brewery"
                    ),
                ),
            ],
            options={
                "db_table": "drinks",
            },
        ),
        migrations.CreateModel(
            name="PackageItem",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("drink", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="products.drink")),
                ("package", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="products.package")),
            ],
            options={
                "db_table": "package_items",
            },
        ),
        migrations.AddField(
            model_name="package",
            name="drinks",
            field=models.ManyToManyField(related_name="packages", through="products.PackageItem", to="products.drink"),
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("price", models.PositiveIntegerField(help_text="판매가격")),
                ("original_price", models.PositiveIntegerField(blank=True, help_text="정가", null=True)),
                ("discount", models.PositiveIntegerField(blank=True, help_text="할인금액", null=True)),
                ("description", models.TextField()),
                ("description_image_url", models.URLField(max_length=255)),
                ("is_gift_suitable", models.BooleanField(default=False)),
                ("is_award_winning", models.BooleanField(default=False)),
                ("is_regional_specialty", models.BooleanField(default=False)),
                ("is_limited_edition", models.BooleanField(default=False)),
                ("is_premium", models.BooleanField(default=False)),
                ("is_organic", models.BooleanField(default=False)),
                ("view_count", models.PositiveIntegerField(default=0)),
                ("order_count", models.PositiveIntegerField(default=0)),
                ("like_count", models.PositiveIntegerField(default=0)),
                ("review_count", models.PositiveIntegerField(default=0)),
                (
                    "status",
                    models.CharField(
                        choices=[("ACTIVE", "활성"), ("INACTIVE", "비활성"), ("OUT_OF_STOCK", "품절")],
                        default="ACTIVE",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "drink",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="product",
                        to="products.drink",
                    ),
                ),
                (
                    "package",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="product",
                        to="products.package",
                    ),
                ),
            ],
            options={
                "db_table": "products",
            },
        ),
        migrations.CreateModel(
            name="ProductImage",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("image_url", models.URLField(max_length=255)),
                ("is_main", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="images", to="products.product"
                    ),
                ),
            ],
            options={
                "db_table": "product_images",
            },
        ),
        migrations.CreateModel(
            name="ProductLike",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="likes", to="products.product"
                    ),
                ),
            ],
            options={
                "db_table": "product_likes",
            },
        ),
    ]
