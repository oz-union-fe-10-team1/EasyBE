# Generated by Django 5.2.4 on 2025-07-21 09:37

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("products", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="productlike",
            name="user",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name="productrecommendation",
            name="product",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="products.product"),
        ),
        migrations.AddField(
            model_name="productrecommendation",
            name="user",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name="producttastetag",
            name="product",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="products.product"),
        ),
        migrations.AddField(
            model_name="product",
            name="region",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="products.region"
            ),
        ),
        migrations.AddField(
            model_name="brewery",
            name="region",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="products.region"
            ),
        ),
        migrations.AddField(
            model_name="producttastetag",
            name="taste_tag",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="products.tastetag"),
        ),
        migrations.AddField(
            model_name="product",
            name="taste_tags",
            field=models.ManyToManyField(blank=True, through="products.ProductTasteTag", to="products.tastetag"),
        ),
        migrations.AlterUniqueTogether(
            name="productlike",
            unique_together={("user", "product")},
        ),
        migrations.AddIndex(
            model_name="productrecommendation",
            index=models.Index(fields=["user", "expires_at"], name="products_pr_user_id_33096b_idx"),
        ),
        migrations.AddIndex(
            model_name="productrecommendation",
            index=models.Index(fields=["recommendation_type", "-score"], name="products_pr_recomme_7b8258_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="productrecommendation",
            unique_together={("user", "product", "recommendation_type")},
        ),
        migrations.AlterUniqueTogether(
            name="producttastetag",
            unique_together={("product", "taste_tag")},
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(fields=["status", "is_featured"], name="products_pr_status_28f1d7_idx"),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(fields=["alcohol_type", "region"], name="products_pr_alcohol_025cf5_idx"),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(fields=["price"], name="products_pr_price_9b1a5f_idx"),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(fields=["-order_count"], name="products_pr_order_c_36e4a9_idx"),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(fields=["-average_rating"], name="products_pr_average_16068c_idx"),
        ),
    ]
